# -*- coding: utf-8 -*-
"""reasoning_model_grpo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/144WyLjSpYaHT5qNOS5XuTAXO9EPKLJK0
"""

!pip install -Uq unsloth transformers trl vllm

pip install --upgrade unsloth unsloth_zoo

# importing necessary libraries
from unsloth import FastLanguageModel, is_bfloat16_supported
import torch
from datasets import load_dataset, Dataset
import re
from trl import GRPOConfig, GRPOTrainer

# loading the model and tokenizer
model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "Qwen/Qwen2.5-3B-Instruct",
    max_seq_length = 2048,
    load_in_4bit = True,
    fast_inference = True
)

model = FastLanguageModel.get_peft_model(
    model,
    r = 16,
    target_modules = [
        "q_proj", "k_proj", "v_proj", "o_proj",
        "gate_proj", "up_proj", "down_proj",
    ],
)

SYSTEM_PROMPT = """
Respond in the following format:
<reasoning>
...
</reasoning>
<answer>
...
</answer>
"""

XML_COT_FORMAT = """\
<reasoning>
{reasoning}
</reasoning>
<answer>
{answer}
</answer>
"""

def extract_xml_answer(text: str) -> str:
    answer = text.split("<answer>")[-1]
    answer = answer.split("</answer>")[0]
    return answer.strip()

def extract_hash_answer(text: str) -> str | None:
    if "####" not in text:
        return None
    return text.split("####")[1].strip()


def get_gsm8k_questions(split = "train") -> Dataset:
    data = load_dataset('openai/gsm8k', 'main')[split]
    data = data.map(lambda x: {
        'prompt': [
            {'role': 'system', 'content': SYSTEM_PROMPT},
            {'role': 'user', 'content': x['question']}
        ],
        'answer': extract_hash_answer(x['answer'])
    })
    return data

dataset = get_gsm8k_questions()

def correctness_reward_func(prompts, completions, answer, **kwargs):
    """
    Returns 1.0 for each generation if it exactly matches the gold answer, else 0.0.
    """
    flat_rewards = []
    # completions is List[batch_idx][gen_idx]['content']
    for i, gen_list in enumerate(completions):
        gold = answer[i]
        for gen in gen_list:
            resp = extract_xml_answer(gen['content'])
            flat_rewards.append(1.0 if resp == gold else 0.0)
    return flat_rewards  # length == batch_size * num_generations


def strict_format_reward_func(prompts, completions, answer=None, **kwargs):
    """
    Returns 0.5 for each generation that strictly follows the XML format, else 0.0.
    """
    pattern = re.compile(r"^<reasoning>\n.*?\n</reasoning>\n<answer>\n.*?\n</answer>\n$", re.DOTALL)
    flat_rewards = []
    for gen_list in completions:
        for gen in gen_list:
            text = gen['content']
            flat_rewards.append(0.5 if pattern.match(text) else 0.0)
    return flat_rewards  # same length as above

training_args = GRPOConfig(
    use_vllm = True,
    learning_rate = 5e-6,
    adam_beta1 = 0.9,
    adam_beta2 = 0.99,
    weight_decay = 0.1,
    lr_scheduler_type = "cosine",
    optim = "adamw_8bit",
    logging_steps = 1,
    bf16 = is_bfloat16_supported(),
    fp16 = not is_bfloat16_supported(),
    per_device_train_batch_size = 1,
    gradient_accumulation_steps = 1,
    num_generations = 3,
    max_prompt_length = 500,
    max_completion_length = 1500,
    max_steps = 150,
    save_steps = 150,
    max_grad_norm = 0.1,
    report_to = "none",
    output_dir = "outputs",
)

trainer = GRPOTrainer(
    model = model,
    processing_class = tokenizer,
    reward_funcs = [
        correctness_reward_func,
        strict_format_reward_func
    ],
    args = training_args,
    train_dataset = dataset,
)
trainer.train()

text = tokenizer.apply_chat_template([
    {"role" : "user", "content" : "How many n's are in Naveen?"},
], tokenize = False, add_generation_prompt = True)

from vllm import SamplingParams
sampling_params = SamplingParams(
    temperature = 0.8,
    top_p = 0.95,
    max_tokens = 1024,
)
output = model.fast_generate(
    [text],
    sampling_params = sampling_params,
    lora_request = None,
)[0].outputs[0].text

output

model.save_lora("grpo_saved_lora")

text = tokenizer.apply_chat_template([
    {"role" : "system", "content" : SYSTEM_PROMPT},
    {"role" : "user", "content" : "How many n's are in Naveen ?"},
], tokenize = False, add_generation_prompt = True)


sampling_params = SamplingParams(
    temperature = 0.8,
    top_p = 0.95,
    max_tokens = 1024,
)
output = model.fast_generate(
    text,
    sampling_params = sampling_params,
    lora_request = model.load_lora("grpo_saved_lora"),
)[0].outputs[0].text

output

